{
	"info": {
		"_postman_id": "d39306a5-d4f2-4807-8c03-8c09e96c93ee",
		"name": "triot",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32658511"
	},
	"item": [
		{
			"name": "albums",
			"item": [
				{
					"name": "get albums",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one album",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/albums/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"albums",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get album image",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/albums/images/20f604a4-a769-46c0-aef1-7a7ed5659cd4.png",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"albums",
								"images",
								"20f604a4-a769-46c0-aef1-7a7ed5659cd4.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "add album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "MTV (My Terrible Vuture)",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/D:/TRIOT/Cover With color.png"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"albums"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/albums/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"albums",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "MTV (My Terrible Vuture)",
									"type": "text"
								},
								{
									"key": "image",
									"value": "",
									"type": "file"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/albums/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"albums",
								"3"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "songs",
			"item": [
				{
					"name": "get songs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one song",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/songs/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"songs",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get songs by albumId",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/songs-by-album/:albumId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"songs-by-album",
								":albumId"
							],
							"variable": [
								{
									"key": "albumId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search song",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/search/:searchStr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"search",
								":searchStr"
							],
							"variable": [
								{
									"key": "searchStr",
									"value": "e"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add song",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Forever Spectator\n ",
									"type": "text"
								},
								{
									"key": "albumId",
									"value": "4",
									"type": "text"
								},
								{
									"key": "durationInSeconds",
									"value": "193",
									"type": "text"
								},
								{
									"key": "description",
									"value": "The song is about being tired of pointless negativity. The singer is bombarded by constant complaining and meaningless conversations. They call out the hypocrisy and vapidness of those around them, feeling like a silent observer.",
									"type": "text"
								},
								{
									"key": "lyrics",
									"value": "(Verse 1)\nWell, I'm sitting breathing silent with my head aching numb\n'Cause it's another blinding morning and the bullshit\nis too loud\nA hundred thousand people walking, passing me by\nand they all spit out the dumbest shit I've heard in my life\nYeah I sit and listen to them bitch and whine 'bout their lives\nLike how every morning they get in a fight with their wives\nI haven't heard the new word from your musically blessed\nBut I've heard it all before so please just give me a rest\n\n(Pre-Chorus)\nIf I had a dime for\nEvery time I heard you spout\nNonsense in my ears I\nCould afford to shut your mouth\nOverstayed your welcome\nNow my patience's running out\nSo you better leave 'cause\nI don't think you're better off with me\n\n(Chorus)\nForever, Spectator\nthe witness of your ignorant behavior\nyour stories blend together\nso devoid of meaning and are never getting better\nObserver, Bystander\nHe told her that he loves her but I hate her\nYou better catch a mirror\nYou'll see for yourself the uglier picture you are\n\n(Verse 2)\nHave you taken but a moment just to look at yourself\nCuz the people all around you love to act like they're deaf\nI've heard about enough from you, now listen to me\nSo brace for impact on the count of (1 2!)\n\nI'm nodding to your rhythm \nas the conversation flows\nLost all idea how time works\nwhile im listening it froze\ncuz the shit youre saying aint right\nand im losing all my daylight\nand now my own insanity has come too close\nNow I'm left to wonder\n\n(Pre-Chorus)\nIf I had a dime for\nEvery time I heard you spout\nNonsense in my ears I\nCould afford to shut your mouth\nAs your fate is sealed shut\nHope your hell won't be too rough\nSo you better leave 'cause\nI don't think you're better off with me\n\n(Chorus)\nForever, Spectator\nthe witness of your ignorant behavior\nyour stories blend together\nso devoid of meaning and are never getting better\nObserver, Bystander\nHe told her that he loves her but I hate her\nYou better catch a mirror\nYou'll see for yourself the uglier picture you are\n\n(Solo)\n\n(Chorus)\nForever, Spectator\n'Cause watch and learn do not end up together\nyour stories are a big blur\nHaven't heard an interesting or good one in forever\nObserver, Bystander\nHe told her that he loves her but I hate her\nYou better catch a mirror\nThe sooner the best, so reflect and repent\nthen you could see for yourself the uglier picture you are\n\n(Outro)\nAs your fate is sealed shut\nHope your hell won't be too rough\nSo you better leave 'cause\nI don't think you're better off with me\n\n\n\nEmpty room without the pack\nHowling in my ears all morning\nPlease just tell me it's an act\nBullshit-ridden, fucking boring\nWatching you I never got\nHow am I a human being?\nTelling me I judge a lot\nBut too late now, you got it coming\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"songs"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete song",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/songs/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"songs",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "7"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update songs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Evil In Her",
									"type": "text"
								},
								{
									"key": "albumId",
									"value": "4",
									"type": "text"
								},
								{
									"key": "durationInSeconds",
									"value": "245",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Deceived lover trashes manipulative ex. Questions addiction & blames for lost innocence. Raw ballad.",
									"type": "text"
								},
								{
									"key": "lyrics",
									"value": "(Verse 1)\\nIt's all set and done\\nand we've not had fun\\nI know\\nit's not easy\\nIt was all made up\\nAnd I've given up\\nYour touch\\nWas not worth it\\n\\n(Pre-chorus)\\nI felt loved, unloved \\nI was young and dumb\\nI didn't know if it was real\\nShe was a bloody whore \\nright down into her core\\nShe was the devil in disguise\\nI wanna know\\n \\n(Chorus)\\nHow could you break a heart and enjoy it?\\nHow did you become the drug I could not quit?\\nWhy'd you entice me to lock me out? \\nI'm figuring out\\nShe's got evil in her, there's no doubt\\n\\n(Verse 2)\\nAnd I rued the day\\nThat I'd let her play \\nDisguised\\nas a lover\\nI endured the pain\\nThat drove me insane\\nA wreck\\nLeft to find my way\\n\\n(Pre-Chorus)\\nThe damage has been done  \\nAll happiness is gone\\nMy vision's black, my soul is sick\\nA toy inside her hands\\nA feeling so immense\\nand now I've lost my innocence\\nSo tell me now\\n\\n(Chorus)\\nHow could you break a heart and enjoy it?\\nHow did you become the drug I could not quit?\\nThe state of my heart is still unknown\\nAs I'm figuring out\\nShe's got evil in me, there's no doubt\\n\\n*Solo\\n\\n(Slow Pre-chorus)\\nAt the last day of hell \\nI made her sit and tell\\nWhat is it that she wants from me\\nShe said the love burned out\\nIt was without a doubt\\nJust a sadistic fucking game of hate and love!\\n\\n(Chorus)\\nHow could you break a heart and enjoy it?\\nHow did you become the drug I could not quit?\\nWhy'd you entice me just to lock me out? \\nI'm figuring out\\nShe's got evil in her, there's no doubt\\nHow could you break a heart and enjoy it?\\nHow did you become the drug I could not quit?\\nThe state of my heart is still unknown\\nAs I'm figuring out\\nShe's got evil in me, there's no doubt ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/songs/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"songs",
								"4"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "members",
			"item": [
				{
					"name": "get members",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one member",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/songs/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"songs",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "firstName",
									"value": "Ofek",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "Shlinger",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "Ofek is the chugging bass of the punk rock scene. With relentless energy and a fearless attitude, Ofek delivers walking basslines , igniting stages and sparking revolutions.",
									"type": "text"
								},
								{
									"key": "part",
									"value": "Bassist",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/ohadx/Downloads/IMG-20220101-WA0012.jpg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/api/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"members"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/members/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"members",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>ID</th>",
									"        <th>Name</th>",
									"        <th>Price</th>",
									"        <th>Stock</th>",
									"        <th>Category ID</th>",
									"        <th>Supplier ID</th>",
									"        <th>Quantity</th>",
									"        <th>Image Name</th>",
									"    </tr>",
									"    <tr>",
									"        <td>{{id}}</td>",
									"        <td>{{name}}</td>",
									"        <td>{{price}}</td>",
									"        <td>{{stock}}</td>",
									"        <td>{{categoryId}}</td>",
									"        <td>{{supplierId}}</td>",
									"        <td>{{quantity}}</td>",
									"        <td>{{imageName}}</td>",
									"    </tr>",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return { response: pm.response.json() }",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"user2 \",\r\n    \"lastName\": \"main2\",\r\n    \"email\": \"user2@gmail.com\",\r\n    \"password\": \"useruser\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"register"
							],
							"query": [
								{
									"key": "",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>ID</th>",
									"        <th>Name</th>",
									"        <th>Price</th>",
									"        <th>Stock</th>",
									"        <th>Category ID</th>",
									"        <th>Supplier ID</th>",
									"        <th>Quantity</th>",
									"        <th>Image Name</th>",
									"    </tr>",
									"    <tr>",
									"        <td>{{id}}</td>",
									"        <td>{{name}}</td>",
									"        <td>{{price}}</td>",
									"        <td>{{stock}}</td>",
									"        <td>{{categoryId}}</td>",
									"        <td>{{supplierId}}</td>",
									"        <td>{{quantity}}</td>",
									"        <td>{{imageName}}</td>",
									"    </tr>",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return { response: pm.response.json() }",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"administrator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJmaXJzdE5hbWUiOiJVc2VyMiAiLCJsYXN0TmFtZSI6Ik1haW4yIiwiZW1haWwiOiJ1c2VyMkBnbWFpbC5jb20ifSwiaWF0IjoxNzE0Mzc5MDMyLCJleHAiOjE3MTQzOTcwMzJ9.J8jmKwPCJzvrijaeHFFrxgaYmf5NxPFcrm3NX4oBXNs",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}